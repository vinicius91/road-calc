@model RoadCalc.Models.ViewModels.RelatorioProjetoViewModel
@{
    ViewBag.Title = "Mapa";
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Simple Polylines</title>
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
        #map {
            height: 100%;
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
</head>
<body>
<div id="map" style="height: 100%"></div>
@*<div id="elevation_chart" style="height: 50%"></div>*@


<script src="https://www.google.com/jsapi"></script>
<script>

    // This example creates a 2-pixel-wide red polyline showing the path of William
    // Kingsford Smith's first trans-Pacific flight between Oakland, CA, and
    // Brisbane, Australia.

    // Load the Visualization API and the columnchart package.
    google.load('visualization', '1', {packages: ['columnchart']});

    function initMap() {
        // The following path marks a path from Mt. Whitney, the highest point in the
        // continental United States to Badwater, Death Valley, the lowest point.
        var path = @Html.Raw(ViewBag.path);

        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 12,
            center: @Html.Raw(ViewBag.PontoMedio),
            mapTypeId: 'terrain'
        });

        // Create an ElevationService.
        var elevator = new google.maps.ElevationService;

        // Draw the path, using the Visualization API and the Elevation service.
        displayPathElevation(path, elevator, map, '#0000CC');
    }

    function displayPathElevation(path, elevator, map, color) {
        // Display a polyline of the elevation path.
        new google.maps.Polyline({
            path: path,
            strokeColor: color,
            strokeOpacity: 0.4,
            map: map
        });

        // Create a PathElevationRequest object using this array.
        // Ask for 256 samples along that path.
        // Initiate the path request.
        elevator.getElevationAlongPath({
            'path': path,
            'samples': 400
        }, plotElevation);
    }

    // Takes an array of ElevationResult objects, draws the path on the map
    // and plots the elevation profile on a Visualization API ColumnChart.
    function plotElevation(elevations, status) {
        var chartDiv = document.getElementById('elevation_chart');
        if (status !== 'OK') {
            // Show the error code inside the chartDiv.
            chartDiv.innerHTML = 'Cannot show elevation: request failed because ' +
                status;
            return;
        }
        // Create a new chart in the elevation_chart DIV.
        var chart = new google.visualization.ColumnChart(chartDiv);

        // Extract the data from which to populate the chart.
        // Because the samples are equidistant, the 'Sample'
        // column here does double duty as distance along the
        // X axis.
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Elevação de Projeto');
        data.addColumn('number', 'Elevação');
        for (var i = 0; i < elevations.length; i++) {
            data.addRow(['', elevations[i].elevation]);
        }



        // Draw the chart using the data within its DIV.
        chart.draw(data, {
            height: 150,
            legend: 'none',
            titleY: 'Elevação (m)'
        });

    }


</script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDq-7Lu_dgwHrlw6J7ObxEfKUplITQVc0M&callback=initMap">
</script>
</body>
</html>